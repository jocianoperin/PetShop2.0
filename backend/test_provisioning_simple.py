#!/usr/bin/env python
"""
Script simples para testar o TenantProvisioningService
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'petshop_project.settings')
django.setup()

from tenants.services import TenantProvisioningService, TenantProvisioningError
from tenants.models import Tenant, TenantUser, TenantConfiguration

def test_service_import():
    """Testa se o servi√ßo pode ser importado"""
    print("‚úì TenantProvisioningService importado com sucesso")
    return True

def test_service_instantiation():
    """Testa se o servi√ßo pode ser instanciado"""
    try:
        service = TenantProvisioningService()
        print("‚úì TenantProvisioningService instanciado com sucesso")
        return True
    except Exception as e:
        print(f"‚úó Erro ao instanciar servi√ßo: {e}")
        return False

def test_validation_method():
    """Testa m√©todo de valida√ß√£o"""
    try:
        service = TenantProvisioningService()
        
        # Teste com dados v√°lidos
        valid_data = {
            'name': 'Pet Shop Teste',
            'subdomain': 'petteste',
            'admin_email': 'admin@petteste.com',
            'admin_password': 'senha123456'
        }
        
        service._validate_tenant_data(valid_data)
        print("‚úì Valida√ß√£o de dados v√°lidos passou")
        
        # Teste com dados inv√°lidos
        invalid_data = {
            'name': 'Pet Shop Teste'
            # Faltam campos obrigat√≥rios
        }
        
        try:
            service._validate_tenant_data(invalid_data)
            print("‚úó Valida√ß√£o deveria ter falhado com dados inv√°lidos")
            return False
        except TenantProvisioningError:
            print("‚úì Valida√ß√£o corretamente rejeitou dados inv√°lidos")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erro no teste de valida√ß√£o: {e}")
        return False

def test_tenant_record_creation():
    """Testa cria√ß√£o de registro de tenant"""
    try:
        service = TenantProvisioningService()
        
        tenant_data = {
            'name': 'Pet Shop Teste Record',
            'subdomain': 'pettesterecord',
            'admin_email': 'admin@pettesterecord.com',
            'admin_password': 'senha123456'
        }
        
        tenant = service._create_tenant_record(tenant_data)
        
        if tenant.name == 'Pet Shop Teste Record':
            print("‚úì Registro de tenant criado com sucesso")
            
            # Limpar o tenant criado
            tenant.delete()
            return True
        else:
            print("‚úó Dados do tenant n√£o foram salvos corretamente")
            return False
            
    except Exception as e:
        print(f"‚úó Erro ao criar registro de tenant: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("Testando TenantProvisioningService...")
    print("=" * 50)
    
    tests = [
        test_service_import,
        test_service_instantiation,
        test_validation_method,
        test_tenant_record_creation
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚úó Teste {test.__name__} falhou: {e}")
    
    print("=" * 50)
    print(f"Resultados: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ Todos os testes passaram!")
        return True
    else:
        print("‚ùå Alguns testes falharam")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)